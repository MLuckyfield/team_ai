name: multi-app-platform
services:
  # Landing Page - Main entry point
  - name: landing
    source_dir: /
    github:
      repo: MLuckyfield/team_ai
      branch: main
    build_command: |
      mkdir -p build
      cat > build/index.html << 'EOF'
      <!DOCTYPE html>
      <html>
      <head>
          <title>Multi-App Platform</title>
          <style>
              body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; }
              .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
              h1 { text-align: center; font-size: 3rem; margin-bottom: 2rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
              .app-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; margin-top: 40px; }
              .app-card { 
                  background: rgba(255,255,255,0.1); 
                  border: 1px solid rgba(255,255,255,0.2); 
                  padding: 30px; 
                  border-radius: 15px; 
                  backdrop-filter: blur(10px);
                  transition: transform 0.3s ease, box-shadow 0.3s ease;
              }
              .app-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0,0,0,0.2); }
              .app-card h2 { color: #fff; margin-bottom: 15px; font-size: 1.5rem; }
              .app-card p { color: rgba(255,255,255,0.8); margin-bottom: 20px; line-height: 1.6; }
              .app-card a { 
                  color: #fff; 
                  text-decoration: none; 
                  background: rgba(255,255,255,0.2);
                  padding: 12px 24px;
                  border-radius: 25px;
                  border: 1px solid rgba(255,255,255,0.3);
                  display: inline-block;
                  font-weight: 500;
                  transition: all 0.3s ease;
              }
              .app-card a:hover { 
                  background: rgba(255,255,255,0.3);
                  transform: scale(1.05);
              }
              .status { text-align: center; margin-top: 40px; color: rgba(255,255,255,0.7); }
              .note { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin-top: 30px; }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>üöÄ Multi-Application Platform</h1>
              <p style="text-align: center; font-size: 1.2rem; margin-bottom: 40px;">Your centralized platform for business applications</p>
              
              <div class="app-grid">
                  <div class="app-card">
                      <h2>üìù Document Management</h2>
                      <p>E-signature and document workflow management system</p>
                      <a href="/docs">Access Documents ‚Üí</a>
                  </div>
                  <div class="app-card">
                      <h2>üîÑ Workflow Automation</h2>
                      <p>Automate processes and connect different business systems</p>
                      <a href="/workflows">Access Workflows ‚Üí</a>
                  </div>
                  <div class="app-card">
                      <h2>ü§ñ AI Assistant</h2>
                      <p>Intelligent assistant for data processing and analysis</p>
                      <a href="/ai">Access AI Assistant ‚Üí</a>
                  </div>
                  <div class="app-card">
                      <h2>üìä Analytics Dashboard</h2>
                      <p>Real-time insights and business intelligence</p>
                      <a href="/analytics">View Analytics ‚Üí</a>
                  </div>
              </div>
              
              <div class="note">
                  <h3>üéØ Platform Features</h3>
                  <ul style="text-align: left; max-width: 600px; margin: 0 auto;">
                      <li>Unified authentication across all applications</li>
                      <li>Shared database and storage infrastructure</li>
                      <li>Scalable microservices architecture</li>
                      <li>Built on Digital Ocean App Platform</li>
                      <li>Ready for custom application integration</li>
                  </ul>
              </div>
              
              <div class="status">
                  <p>Platform successfully deployed and running</p>
                  <p>Ready for application integration</p>
              </div>
          </div>
      </body>
      </html>
      EOF
      
      # Create a simple API endpoint
      cat > build/server.js << 'EOF'
      const express = require('express');
      const path = require('path');
      const app = express();
      const port = process.env.PORT || 8080;

      // Serve static files
      app.use(express.static(path.join(__dirname)));

      // API endpoints for future integrations
      app.get('/api/health', (req, res) => {
        res.json({ status: 'healthy', timestamp: new Date().toISOString() });
      });

      app.get('/api/apps', (req, res) => {
        res.json({
          apps: [
            { name: 'documents', status: 'ready', path: '/docs' },
            { name: 'workflows', status: 'ready', path: '/workflows' },
            { name: 'ai-assistant', status: 'ready', path: '/ai' },
            { name: 'analytics', status: 'ready', path: '/analytics' }
          ]
        });
      });

      // Catch-all handler for SPA routing
      app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'index.html'));
      });

      app.listen(port, () => {
        console.log(`Multi-App Platform running on port ${port}`);
      });
      EOF
      
      # Create package.json for the simple server
      cat > build/package.json << 'EOF'
      {
        "name": "multi-app-platform",
        "version": "1.0.0",
        "description": "Multi-Application Platform",
        "main": "server.js",
        "scripts": {
          "start": "node server.js"
        },
        "dependencies": {
          "express": "^4.18.2"
        }
      }
      EOF
    run_command: cd build && npm install && npm start
    environment_slug: node-js
    instance_count: 1
    instance_size_slug: basic-xxs
    routes:
      - path: /

  # Sample microservice - can be replaced with actual applications
  - name: api-service
    source_dir: /
    github:
      repo: MLuckyfield/team_ai
      branch: main
    build_command: |
      mkdir -p api
      cat > api/package.json << 'EOF'
      {
        "name": "api-service",
        "version": "1.0.0",
        "main": "server.js",
        "scripts": {
          "start": "node server.js"
        },
        "dependencies": {
          "express": "^4.18.2",
          "cors": "^2.8.5"
        }
      }
      EOF
      
      cat > api/server.js << 'EOF'
      const express = require('express');
      const cors = require('cors');
      const app = express();
      const port = process.env.PORT || 8080;

      app.use(cors());
      app.use(express.json());

      // Sample API endpoints
      app.get('/health', (req, res) => {
        res.json({ service: 'api-service', status: 'healthy', timestamp: new Date().toISOString() });
      });

      app.get('/data', (req, res) => {
        res.json({ 
          message: 'Sample data endpoint',
          data: [
            { id: 1, name: 'Sample Item 1', status: 'active' },
            { id: 2, name: 'Sample Item 2', status: 'pending' }
          ]
        });
      });

      app.post('/webhook', (req, res) => {
        console.log('Webhook received:', req.body);
        res.json({ received: true, timestamp: new Date().toISOString() });
      });

      app.listen(port, () => {
        console.log(`API Service running on port ${port}`);
      });
      EOF
    run_command: cd api && npm install && npm start
    environment_slug: node-js
    instance_count: 1
    instance_size_slug: basic-xxs
    routes:
      - path: /api

# Database for shared data
databases:
  - name: shared-database
    engine: PG
    size: basic-xs
    num_nodes: 1

# Environment Variables
envs:
  - key: NODE_ENV
    scope: RUN_AND_BUILD_TIME
    value: production

# Environment Variables
envs:
  - key: OPENAI_API_KEY
    scope: RUN_TIME
  - key: ANTHROPIC_API_KEY
    scope: RUN_TIME 