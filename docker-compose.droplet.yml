version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password_123}
      POSTGRES_NON_ROOT_USER: n8n
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: docker.n8n.io/n8nio/n8n:1.75.0
    container_name: n8n_app
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password_123}
      DB_POSTGRESDB_SCHEMA: public
      
      # n8n Configuration
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678}
      
      # AI Configuration
      N8N_AI_ENABLED: true
      
      # Security
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your-very-secure-encryption-key-here}
      
      # API Keys (set these in your .env file)
      N8N_OPENAI_API_KEY: ${N8N_OPENAI_API_KEY}
      N8N_ANTHROPIC_API_KEY: ${N8N_ANTHROPIC_API_KEY}
      
      # User Settings
      N8N_USER_MANAGEMENT_DISABLED: false
      N8N_METRICS: true
      N8N_LOG_LEVEL: info
      
      # Workflow Settings
      EXECUTIONS_PROCESS: main
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      
      # Generic OAuth App
      N8N_HIRING_BANNER_ENABLED: false
      
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/files
    ports:
      - "5678:5678"
    networks:
      - n8n_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: nginx reverse proxy for SSL/domain setup
  nginx:
    image: nginx:alpine
    container_name: n8n_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - n8n_network
    depends_on:
      - n8n
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  n8n_files:
    driver: local

networks:
  n8n_network:
    driver: bridge 