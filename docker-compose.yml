version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  opensign_data:
  n8n_data:
  crawl4ai_data:
  traefik_data:

services:
  # Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - app-network

  # Database (only for OpenSign metadata)
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: opensign
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d opensign"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shared Redis (for Crawl4AI caching and OpenSign sessions)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenSign Application (with AWS S3 for file storage)
  opensign:
    build:
      context: ./opensign
      dockerfile: Dockerfile
    container_name: opensign
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/opensign
      - REDIS_URL=redis://redis:6379
      - PUBLIC_URL=https://${DOMAIN}/opensign
      - BASE_PATH=/opensign
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - STORAGE_TYPE=s3
    volumes:
      - opensign_data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensign.rule=Host(`${DOMAIN}`) && PathPrefix(`/opensign`)"
      - "traefik.http.routers.opensign.entrypoints=websecure"
      - "traefik.http.routers.opensign.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.opensign-stripprefix.stripprefix.prefixes=/opensign"
      - "traefik.http.routers.opensign.middlewares=opensign-stripprefix"
      - "traefik.http.services.opensign.loadbalancer.server.port=3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # n8n Workflow Automation (file-based storage, no database needed)
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://${DOMAIN}/n8n/
      - N8N_PATH=/n8n
      - VUE_APP_URL_BASE_API=https://${DOMAIN}/n8n/
      - N8N_EDITOR_BASE_URL=https://${DOMAIN}/n8n/
      # File-based storage (no database required)
      - DB_TYPE=sqlite
      - N8N_USER_FOLDER=/home/node/.n8n
    volumes:
      - n8n_data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${DOMAIN}`) && PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - app-network

  # Crawl4AI Service (only needs Redis for caching)
  crawl4ai:
    image: unclecode/crawl4ai:latest
    container_name: crawl4ai
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - BASE_PATH=/crawl4ai
    volumes:
      - crawl4ai_data:/app/data
      - ./crawl4ai-config.yml:/app/config.yml
    shm_size: 2g
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crawl4ai.rule=Host(`${DOMAIN}`) && PathPrefix(`/crawl4ai`)"
      - "traefik.http.routers.crawl4ai.entrypoints=websecure"
      - "traefik.http.routers.crawl4ai.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.crawl4ai-stripprefix.stripprefix.prefixes=/crawl4ai"
      - "traefik.http.routers.crawl4ai.middlewares=crawl4ai-stripprefix"
      - "traefik.http.services.crawl4ai.loadbalancer.server.port=11235"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network 